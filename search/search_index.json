{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"logagg-utils Common utilities for logagg stack compatible for both python2.7 and python3.5 Prerequisites Python2.7 or Python3.5 Installation Dependencies $ sudo apt install python3-dev python3-pip pkg-config build-essential python3-pip Install logagg-utils pip3 install git+https://github.com/deep-compute/logagg-utils.git Check installation pip3 freeze | grep logagg-utils Usage in python interprator >>> from logagg_utils import utils","title":"Overview"},{"location":"#logagg-utils","text":"Common utilities for logagg stack compatible for both python2.7 and python3.5","title":"logagg-utils"},{"location":"#prerequisites","text":"Python2.7 or Python3.5","title":"Prerequisites"},{"location":"#installation","text":"","title":"Installation"},{"location":"#dependencies","text":"$ sudo apt install python3-dev python3-pip pkg-config build-essential python3-pip","title":"Dependencies"},{"location":"#install-logagg-utils","text":"pip3 install git+https://github.com/deep-compute/logagg-utils.git","title":"Install logagg-utils"},{"location":"#check-installation","text":"pip3 freeze | grep logagg-utils","title":"Check installation"},{"location":"#usage-in-python-interprator","text":">>> from logagg_utils import utils","title":"Usage in python interprator"},{"location":"nsqsender/","text":"NSQSender Publishes logs and heartbeats to a given topic in NSQ . Also keeps a checks if the depth(Max number of msgs) is not exceeded before sending. Setup Install the nsq package, at where we need to bring up the nsq server. Run the following commands to install nsq : $ sudo apt-get install libsnappy-dev $ wget https://s3.amazonaws.com/bitly-downloads/nsq/nsq-1.0.0-compat.linux-amd64.go1.8.tar.gz $ tar zxvf nsq-1.0.0-compat.linux-amd64.go1.8.tar.gz $ sudo cp nsq-1.0.0-compat.linux-amd64.go1.8/bin/* /usr/local/bin Bring up the nsq instances at the required server with following commands: NOTE: Run each command in a seperate Terminal window nsqlookupd $ nsqlookupd nsqd -lookupd-tcp-address <ip-addr or DNS> :4160 $ nsqd -lookupd-tcp-address localhost:4160 nsqadmin -lookupd-http-address <ip-addr or DNS> :4161 $ nsqadmin -lookupd-http-address localhost:4161 Usage Sending logs to NSQ to a topic $ python3 >>> from logagg_utils import NSQSender >>> from logagg_utils.utils import DUMMY >>> >>> logs_sender = NSQSender(nsqd_http_address='localhost:4151', nsq_topic='logs', log=DUMMY) >>> >>> import time >>> def prepare_log_list(): ... log_msg = 'This is log number {}, at time {}' ... logs = list() ... for i in range(500): logs.append({'log': log_msg.format(i, time.time())}) ... return logs ... >>> logs = prepare_log_list() >>> logs_sender.handle_logs(logs) Read logs from a NSQ topic $ nsq_tail -nsqd-tcp-address localhost:4150 -topic logs ... ... This is log number 494, at time 1543906852.718413 This is log number 495, at time 1543906852.7184162 This is log number 496, at time 1543906852.7184188 This is log number 497, at time 1543906852.7184217 This is log number 498, at time 1543906852.7184246 This is log number 499, at time 1543906852.7184308","title":"NSQSender"},{"location":"nsqsender/#nsqsender","text":"Publishes logs and heartbeats to a given topic in NSQ . Also keeps a checks if the depth(Max number of msgs) is not exceeded before sending.","title":"NSQSender"},{"location":"nsqsender/#setup","text":"","title":"Setup"},{"location":"nsqsender/#install-the-nsq-package-at-where-we-need-to-bring-up-the-nsq-server","text":"Run the following commands to install nsq : $ sudo apt-get install libsnappy-dev $ wget https://s3.amazonaws.com/bitly-downloads/nsq/nsq-1.0.0-compat.linux-amd64.go1.8.tar.gz $ tar zxvf nsq-1.0.0-compat.linux-amd64.go1.8.tar.gz $ sudo cp nsq-1.0.0-compat.linux-amd64.go1.8/bin/* /usr/local/bin","title":"Install the nsq package, at where we need to bring up the nsq server."},{"location":"nsqsender/#bring-up-the-nsq-instances-at-the-required-server-with-following-commands","text":"NOTE: Run each command in a seperate Terminal window nsqlookupd $ nsqlookupd nsqd -lookupd-tcp-address <ip-addr or DNS> :4160 $ nsqd -lookupd-tcp-address localhost:4160 nsqadmin -lookupd-http-address <ip-addr or DNS> :4161 $ nsqadmin -lookupd-http-address localhost:4161","title":"Bring up the nsq instances at the required server with following commands:"},{"location":"nsqsender/#usage","text":"","title":"Usage"},{"location":"nsqsender/#sending-logs-to-nsq-to-a-topic","text":"$ python3 >>> from logagg_utils import NSQSender >>> from logagg_utils.utils import DUMMY >>> >>> logs_sender = NSQSender(nsqd_http_address='localhost:4151', nsq_topic='logs', log=DUMMY) >>> >>> import time >>> def prepare_log_list(): ... log_msg = 'This is log number {}, at time {}' ... logs = list() ... for i in range(500): logs.append({'log': log_msg.format(i, time.time())}) ... return logs ... >>> logs = prepare_log_list() >>> logs_sender.handle_logs(logs)","title":"Sending logs to NSQ to a topic"},{"location":"nsqsender/#read-logs-from-a-nsq-topic","text":"$ nsq_tail -nsqd-tcp-address localhost:4150 -topic logs ... ... This is log number 494, at time 1543906852.718413 This is log number 495, at time 1543906852.7184162 This is log number 496, at time 1543906852.7184188 This is log number 497, at time 1543906852.7184217 This is log number 498, at time 1543906852.7184246 This is log number 499, at time 1543906852.7184308","title":"Read logs from a NSQ topic"},{"location":"utils/","text":"Importing >>> from logagg_utils import utils >>> dir(utils) ['DUMMY', 'Dummy', 'Thread', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'ensure_dir', 'is_number', 'utils.ispartial', 'log_exception', 'makedirs', 'numbers', 'path', 'start_daemon_thread', 'traceback'] >>> Module Contents DUMMY Abstraction that creates a dummy object that does no-operations on method invocations but logs all interactions. >>> utils.DUMMY.foo() <deeputil.misc.Dummy object at 0x7f0619e79ac8> >>> utils.DUMMY.bar <deeputil.misc.Dummy object at 0x7f0619e79ac8> ensure_dir Checks if a given directory is there or not and creates one if not. >>> import os >>> dir = '/tmp/orange/apple/banana' >>> os.path.isdir(dir) False >>> os.path.isdir(dir) False >>> ensure_dir(dir) '/tmp/orange/apple/banana' >>> os.path.isdir('/tmp/orange') True >>> os.path.isdir('/tmp/orange/apple') True >>> os.path.isdir('/tmp/orange/apple/banana') True is_number Determines the type is number or not. >>> utils.is_number('45') False >>> utils.is_number(45) True >>> utils.is_number(45.0) True >>> utils.is_number(45/56) True ispartial If log line starts with a space it is recognized as a partial line >>> utils.ispartial('<time> <event> <some_log_line>') False >>> utils.ispartial(' <space> <traceback:> <some_line>') True >>> utils.ispartial(' <tab> <traceback:> <some_line>') True >>> utils.ispartial(' <white_space> <traceback:> <some_line>') True >>> utils.ispartial('') False start_daemon_thread Starts a deamon thread for a given target function and arguments. >>> def hello(): ... for i in range(5): print('hello world!') >>> th = utils.start_daemon_thread(hello).join() hello world! hello world! hello world! hello world! hello world!","title":"Utils"},{"location":"utils/#importing","text":">>> from logagg_utils import utils >>> dir(utils) ['DUMMY', 'Dummy', 'Thread', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'ensure_dir', 'is_number', 'utils.ispartial', 'log_exception', 'makedirs', 'numbers', 'path', 'start_daemon_thread', 'traceback'] >>>","title":"Importing"},{"location":"utils/#module-contents","text":"DUMMY Abstraction that creates a dummy object that does no-operations on method invocations but logs all interactions. >>> utils.DUMMY.foo() <deeputil.misc.Dummy object at 0x7f0619e79ac8> >>> utils.DUMMY.bar <deeputil.misc.Dummy object at 0x7f0619e79ac8> ensure_dir Checks if a given directory is there or not and creates one if not. >>> import os >>> dir = '/tmp/orange/apple/banana' >>> os.path.isdir(dir) False >>> os.path.isdir(dir) False >>> ensure_dir(dir) '/tmp/orange/apple/banana' >>> os.path.isdir('/tmp/orange') True >>> os.path.isdir('/tmp/orange/apple') True >>> os.path.isdir('/tmp/orange/apple/banana') True is_number Determines the type is number or not. >>> utils.is_number('45') False >>> utils.is_number(45) True >>> utils.is_number(45.0) True >>> utils.is_number(45/56) True ispartial If log line starts with a space it is recognized as a partial line >>> utils.ispartial('<time> <event> <some_log_line>') False >>> utils.ispartial(' <space> <traceback:> <some_line>') True >>> utils.ispartial(' <tab> <traceback:> <some_line>') True >>> utils.ispartial(' <white_space> <traceback:> <some_line>') True >>> utils.ispartial('') False start_daemon_thread Starts a deamon thread for a given target function and arguments. >>> def hello(): ... for i in range(5): print('hello world!') >>> th = utils.start_daemon_thread(hello).join() hello world! hello world! hello world! hello world! hello world!","title":"Module Contents"}]}